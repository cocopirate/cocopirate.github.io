{"categories":[{"title":"人工智能","uri":"https://www.antstu.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"title":"爬虫","uri":"https://www.antstu.com/categories/%E7%88%AC%E8%99%AB/"},{"title":"网站","uri":"https://www.antstu.com/categories/%E7%BD%91%E7%AB%99/"},{"title":"语法","uri":"https://www.antstu.com/categories/%E8%AF%AD%E6%B3%95/"},{"title":"运维","uri":"https://www.antstu.com/categories/%E8%BF%90%E7%BB%B4/"}],"posts":[{"content":"设备环境 服务器选购 系统：Ubuntu 22.04 64位 GPU：NVIDIA Tesla T4 系统盘：128GB，各种模型较大，建议使用128GB以上 选用按量付费方式，停机时选择“节省停机模式”节省开支 环境配置 安装基础工具 安装Python3.10以上版本、pip和git等基础工具，已按照的忽略本步骤。基础工具按照参考：\n通过yum安装一些基础工具sudo yum install -y git conda mesa-libGL zlib-devel libjpeg-turbo-devel 使用python --version确认版本，最好是3.10以上版本。以Python3.8版本为例sudo yum install -y python38 python38-pip\n安装CUDA 访问NVIDIA官网下载CUDA，选择对应的系统版本，以Ubuntu 22.04为例，选择Linux-x86_64-ubuntu22.04，下载deb(network)版本。\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb sudo dpkg -i cuda-keyring_1.0-1_all.deb sudo apt-get update sudo apt-get -y install cuda= apt-cache madison cuda 查看可安装的版本\n创建python虚拟环境 mkdir sd_venv # 放置python虚拟环境的目录 cd sd_venv # 进入目录 python3 -m venv sd-venv # 创建python虚拟环境，其中sd-venv为虚拟环境名称 source bin/activate # 激活虚拟环境 以下命令操作全部在python虚拟环境下操作\n安装Stable Diffusion WebUI 从Github上获取最新的Stable Diffusion WebUI代码。\ngit clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git 克隆完成后，进入stable-diffusion-webui目录，安装依赖。\ncd stable-diffusion-webui pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu117 pip install opencv-python-headless gfpgan open-clip-torch xformers pyngrok clip-anytorch pip install -r requirements_versions.txt 启动Stable Diffusion WebUI 当安装全部完成后，使用以下命令启动：\npython launch.py --listen 若需要后台运行启用可以使用nohup命令：\nnohup python launch.py --listen \u0026amp; 启用完成后，在阿里云安全组中添加规则，允许对应的端口访问，例如：7860\n","id":0,"section":"posts","summary":"设备环境 服务器选购 系统：Ubuntu 22.04 64位 GPU：NVIDIA Tesla T4 系统盘：128GB，各种模型较大，建议使用128GB以上 选用按量付费方式","tags":["Stable Diffusion"],"title":"阿里云部署Stable Diffusion WebUI","uri":"https://www.antstu.com/2023/05/aliyun-stable-diffusion-webui/","year":"2023"},{"content":"关于Google Analytics Google Analytics是一个由Google所提供的网站流量统计服务，通过在网站中埋入Google Analytics追踪码，可以方便查看网站流量信息，包括来源、用户、设备、访问路径等，对于网站入门来说是非常推荐使用的工具。\n在实际使用中，会发现Google Analytics 4的Measurement ID是以G-开头的，而Hugo中的Google Analytics ID是以UA-开头的，这就导致了无法使用Google Analytics 4的问题。\nHugo使用Google Analytics 4使用方法 将Google Analyics ID（Measurement ID）放置在config.toml中的[params]中。\n# Google Analytics 4 googleAnalyticsID = \u0026#34;G-00000XXXXX\u0026#34; 创建一个名为analytics-gtag.html的文件，放置在/layouts/partials中，代码如下：\n\u0026lt;!-- Global site tag (gtag.js) - Google Analytics --\u0026gt; \u0026lt;script async src=\u0026quot;https://www.googletagmanager.com/gtag/js?id={{ .Site.Params.GoogleAnalyticsID }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', '{{ .Site.Params.GoogleAnalyticsID }}'); \u0026lt;/script\u0026gt; 在/layouts/_default/baseof.html中的\u0026lt;head\u0026gt;标签后调用这个partial，代码如下：\n\u0026lt;head\u0026gt; {{ if .Site.Params.GoogleAnalyticsID }} {{ partial \u0026quot;analytics-gtag.html\u0026quot; . }} {{ end }} ... \u0026lt;/head\u0026gt; 以上就是在Hugo中使用Google Analytics 4的方法。\n","id":1,"section":"posts","summary":"关于Google Analytics Google Analytics是一个由Google所提供的网站流量统计服务，通过在网站中埋入Google Analytics追踪码，可","tags":["建站","网站统计","Google Analytics"],"title":"Hugo中使用Google Analytics 4","uri":"https://www.antstu.com/2023/04/hugo-google-analytics/","year":"2023"},{"content":"准备条件 公网服务器：一台具有公网IP的服务器，作为服务端 官方文档：https://gofrp.org/docs/ frp下载页面：https://github.com/fatedier/frp/releases 服务端配置 下载最新版本\nwget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_386.tar.gz 解压下载文件\ntar -zxvf frp_0.44.0_linux_386.tar.gz frps和frps.ini是客户端相关文件与配置，进入解压目录配置frps.ini文件：\n[common] # 绑定端口配置 bind_port = 7000 vhost_https_port = 7022 vhost_http_port = 7080 token = 1520 # 控制面板配置 dashboard_port = 7001 dashboard_user = \u0026lt;登录账号\u0026gt; dashboard_pwd = \u0026lt;登录密码\u0026gt; enable_prometheus = true log_file = /var/log/frps.log log_level = info log_max_days = 3 在etc目录创建目录：sudo mkdir -p /etc/frp 将frps.ini复制至/etc/frp目录：sudo cp frps.ini /etc/frp 将解压文件中的frps目录复制至/usr/bin目录：sudo cp frps /usr/bin 创建并编辑frps.service文件vim /etc/systemd/system/frps.service [Unit] # 服务名称，可自定义 Description = frp server After = network.target syslog.target Wants = network.target [Service] Type = simple # 启动frps的命令，需修改为您的frps的安装路径 ExecStart = /usr/bin/frps -c /etc/frp/frps.ini [Install] WantedBy = multi-user.target 启动frp：systemctl start frps 停止frp：systemctl stop frps 重启frp：systemctl restart frps 查看frp状态：systemctl status frps 配置frps开机自启：systemctl enable frps 客户端配置 客户端指内网中需要暴露服务的设备\n从下载页面下载压缩包并解压 frpc和frpc.ini是客户端相关文件与配置 配置frpc.ini文件 [common] # 服务器的ip地址 server_addr = \u0026lt;服务器IP\u0026gt; server_port = 7000 token = 1520 # 配置http服务 [web] type = http local_port = 8000 custom_domains = \u0026lt;自定义域名\u0026gt; # 配置https服务 [test_htts2http] type = https custom_domains = \u0026lt;自定义域名\u0026gt; plugin = https2http plugin_local_addr = 127.0.0.1:8000 # HTTPS 证书相关的配置 plugin_crt_path = \u0026lt;服务器证书路径\u0026gt;.crt plugin_key_path = \u0026lt;服务器证书路径\u0026gt;.key plugin_host_header_rewrite = 127.0.0.1 plugin_header_X-From-Where = frp SSL域名证书说明\nHTTPS证书文件需放在服务器端对应的文件目录 pem转crt格式：openssl x509 -in fullchain.pem -out fullchain.crt pem转key格式：openssl rsa -in privkey.pem -out privkey.key\n客户端启动：./frpc -c frpc.ini 更改客户端host文件：\u0026lt;服务器IP\u0026gt; \u0026lt;域名\u0026gt; http访问内网8000端口服务：\u0026lt;http域名\u0026gt;:7080 https访问内网8000端口服务：\u0026lt;https域名\u0026gt;:7022 ","id":2,"section":"posts","summary":"准备条件 公网服务器：一台具有公网IP的服务器，作为服务端 官方文档：https://gofrp.org/docs/ frp下载页面：https:","tags":["frp","内网穿透"],"title":"使用frp内网穿透","uri":"https://www.antstu.com/2022/12/frp-config/","year":"2022"},{"content":"docker部署scrapyd 创建一个文件夹，并在文件夹下创建三个文件：\nDockerfile：通过docker build 制作镜像 scrapyd.conf：scrapyd的配置文件 requestments.txt：相关依赖包，项目会在scrapyd所在环境上运行 Dockerfile FROM python:3.8 WORKDIR /code RUN mkdir ./logs COPY scrapyd.conf /etc/scrapyd/ COPY requirements.txt . EXPOSE 6800 RUN pip3 install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple RUN pip3 install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple # 默认的logs位置是在 /root/logs; RUN mkdir /root/logs CMD logparser -dir ./logs \u0026amp; scrapyd requirements.txt beautifulsoup4==4.11.1 fake-useragent==0.1.11 lxml==4.8.0 pymongo==3.5.0 PyMySQL==1.0.2 pyquery==1.4.3 python-scrapyd-api==2.1.2 redis==4.3.1 requests==2.27.1 Scrapy==2.6.1 scrapy-redis==0.7.2 Scrapy-Redis-BloomFilter==0.8.1 scrapy-splash==0.8.0 scrapyd==1.3.0 logparser==0.8.2 pyopenssl==22.0.0 scrapyd.conf [scrapyd] eggs_dir = eggs logs_dir = logs items_dir = jobs_to_keep = 5 dbs_dir = dbs max_proc = 0 max_proc_per_cpu = 4 finished_to_keep = 100 poll_interval = 5.0 bind_address = 0.0.0.0 http_port = 6800 username = password = debug = off runner = scrapyd.runner jobstorage = scrapyd.jobstorage.MemoryJobStorage application = scrapyd.app.application launcher = scrapyd.launcher.Launcher webroot = scrapyd.website.Root eggstorage = scrapyd.eggstorage.FilesystemEggStorage [services] schedule.json = scrapyd.webservice.Schedule cancel.json = scrapyd.webservice.Cancel addversion.json = scrapyd.webservice.AddVersion listprojects.json = scrapyd.webservice.ListProjects listversions.json = scrapyd.webservice.ListVersions listspiders.json = scrapyd.webservice.ListSpiders delproject.json = scrapyd.webservice.DeleteProject delversion.json = scrapyd.webservice.DeleteVersion listjobs.json = scrapyd.webservice.ListJobs daemonstatus.json = scrapyd.webservice.DaemonStatus 制作镜像和启动容器 # 制作镜像 docker build -t scrapyd . # 启动容器 docker run -d -p 6800:6800 --name scrapyd scrapyd docker部署scrapyweb 创建一个文件夹，并在文件夹下创建三个文件：\nDockerfile：通过docker build 制作镜像 scrapydweb_settings_v10.py：scrapydweb的配置文件，为方便修改使用挂载方式 Dockerfile FROM python:3.10 WORKDIR /code EXPOSE 5000 RUN pip3 install Werkzeug==2.0.3 -i https://pypi.tuna.tsinghua.edu.cn/simple RUN pip3 install scrapydweb -i https://pypi.tuna.tsinghua.edu.cn/simple CMD scrapydweb scrapydweb_settings_v10.py 在宿主机先通过pip install scrapydweb安装scrapydweb，安装后执行scrapydweb生成scrapydweb_settings_v10.py文件，修改文件中的SCRAPYD_SERVERS配置\n# 其他配置... SCRAPYD_SERVERS = [ 'my_scrapyd:6800' # 使用容器的链接配置SCRAPYD_SERVERS地址 ] # 其他配置... 制作镜像和启动容器 将已创建的scrapyd容器与scrapydweb容器链接并命名为my_scrapyd； 将宿主机的/root/scrapydweb目录挂载至容器的code目录，方便配置scrapydweb_settings_v10.py文件。 docker build -t scrapydweb . docker run -d -p 5000:5000 --link scrapyd:my_scrapyd -v /root/scrapydweb:/code --name scrapydweb scrapydweb 其他事项 访问scrapyweb如果出现Http400处理方式：\npip install flask==2.0.2 pip install flask-compress==1.12 在容器中通过scrapydweb命令重启即可。\n","id":3,"section":"posts","summary":"docker部署scrapyd 创建一个文件夹，并在文件夹下创建三个文件： Dockerfile：通过docker build 制作镜像 scrapyd.co","tags":["scrapy","爬虫","docker","scrapyd","scrapyweb"],"title":"Docker部署Scrapyd+Scrapyweb","uri":"https://www.antstu.com/2022/11/docker-scrapyd-scrapyweb/","year":"2022"},{"content":"本文提供了在Hugo的内容文件中使用的基本的Markdown语法示例，方便编写文档时查询使用。\n标题 下面是HTML中\u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt;元素代表六级节标题。\u0026lt;h1\u0026gt;是最大的标题，而\u0026lt;h6\u0026gt;是最小的标题。\n# H1标题 ## H2标题 ### H3标题 #### H4标题 ##### H5标题 ###### H6标题 段落 我翻开历史一查，这历史没有年代。歪歪斜斜的每页上都写着“仁义道德”几个字，我横竖睡不着，仔细看了半夜，才从字缝里看出来，满本上都写着两个字“吃人\u0026quot;！\n——鲁迅 《狂人日记》\n引用块 引用块表示从其他来源引用的内容，可选地带有必须在footer或cite元素内的引用，并且可选地带有内联更改，例如注释和缩写。\n不注明出处的引用块 这里是引用块的内容。 注意，你可以在引用块中使用Markdown语法。\n注明出处的引用 不要通过共享内存来进行通信，而是通过通信来共享内存 — 罗布·派克1\n表格 Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box. 表格不是Markdown规范的重要部分，但Hugo支持开箱即用。\n姓名 年龄 鲍勃 27 爱丽丝 23 表格内部使用Markdown 斜体示例 加粗示例 划线示例 代码示例 斜体 加粗 划线 code 代码块 带反引号的代码块 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 缩进四个空格的代码块 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 带有 Hugo 内部高亮简码的代码块 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列表 有序列表 第一个列表项 第二个列表项 第三个列表项 无序列表 列表项 另一个列表项 还有一个列表项 嵌套列表 项目 第一个子列表项 第二个子列表项 其他元素 — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n图片 图片放置在项目的/static/images目录下，使用Markdown语法![](/images/ydmt256.png)配置图片的相对路径展示。图片将按原始尺寸显示，如下所示：\n图片若需要调整大小，可使用Hugo的figure短代码引用图片，如下所示：\n# 需要将下面代码中的{和\u0026lt;之间的空格删除，否则无法正常显示 {{ \u0026lt;figure src=\u0026quot;/images/ydmt256.png\u0026quot; title=\u0026quot;图片示例\u0026quot; width=\u0026quot;10%\u0026quot; \u0026gt;}} 缩小后的图片大小如下所示：\n图片示例 以上引述摘自罗布·派克在2015年11月18日的Gopherfest演讲。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","id":4,"section":"posts","summary":"本文提供了在Hugo的内容文件中使用的基本的Markdown语法示例，方便编写文档时查询使用。 标题 下面是HTML中\u0026lt;h1\u0026gt;—\u0026l","tags":["Markdown","语法","Hugo"],"title":"Hugo编写文档语法","uri":"https://www.antstu.com/2021/03/markdown-syntax/","year":"2021"}],"tags":[{"title":"docker","uri":"https://www.antstu.com/tags/docker/"},{"title":"frp","uri":"https://www.antstu.com/tags/frp/"},{"title":"Google Analytics","uri":"https://www.antstu.com/tags/google-analytics/"},{"title":"Hugo","uri":"https://www.antstu.com/tags/hugo/"},{"title":"Markdown","uri":"https://www.antstu.com/tags/markdown/"},{"title":"scrapy","uri":"https://www.antstu.com/tags/scrapy/"},{"title":"scrapyd","uri":"https://www.antstu.com/tags/scrapyd/"},{"title":"scrapyweb","uri":"https://www.antstu.com/tags/scrapyweb/"},{"title":"Stable Diffusion","uri":"https://www.antstu.com/tags/stable-diffusion/"},{"title":"内网穿透","uri":"https://www.antstu.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"title":"建站","uri":"https://www.antstu.com/tags/%E5%BB%BA%E7%AB%99/"},{"title":"爬虫","uri":"https://www.antstu.com/tags/%E7%88%AC%E8%99%AB/"},{"title":"网站统计","uri":"https://www.antstu.com/tags/%E7%BD%91%E7%AB%99%E7%BB%9F%E8%AE%A1/"},{"title":"语法","uri":"https://www.antstu.com/tags/%E8%AF%AD%E6%B3%95/"}]}